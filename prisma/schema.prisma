generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id             String           @id @default(uuid())
  title          String
  type           JobType
  location       String?
  salaryMin      Int?
  salaryMax      Int?
  postingDate    DateTime
  endPostingDate DateTime?
  startDate      DateTime?
  endDate        DateTime?
  description    String
  requirements   String
  status         JobStatus        @default(ACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String // Foreign key to User
  user           User             @relation(fields: [userId], references: [id]) // Relating Job to User
  public         Boolean          @default(false)
  JobApplication JobApplication[]
}

enum JobType {
  INTERNSHIP
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum JobStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model User {
  id             String           @id @default(uuid())
  name           String?
  firstName      String
  lastName       String
  email          String           @unique
  emailVerified  DateTime?
  company        String?
  password       String?
  image          String?
  role           String           @default("recruiter")
  accounts       Account[]
  sessions       Session[]
  jobs           Job[] // One-to-many relation with Job
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JobApplication JobApplication[]
}

model JobApplication {
  id    String @id @default(uuid())
  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  userId String // Add userId to associate the application with a user
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName       String
  lastName        String
  email           String
  phone           String?
  university      String?
  major           String?
  graduationYear  String?
  githubConnected Boolean
  linkedinUrl     String?
  portfolioUrl    String?
  devpostUsername String?
  whyInterested   String

  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
